package com.hy.springboot.basic.struct;

/**
 * @user yang he
 * @date old
 * @introduce        红黑树(一种平衡二叉树)
 **/
public class RedBlackTree {

    /*
                概念

                    1 每个节点或是红色，或是黑色
                    2 根节点是黑色
                    3 每个叶节点（NIL 空节点）是黑色
                    4 如果一个节点是红色，则它的2个子节点都是黑色(从每个叶子到根的所有路径上不能有两个连续的红色节点)
                    5 对于每个节点，从该节点到其所有后代叶节点的简单路径上，
                        均包含相同数目的黑色节点

                导致

                    从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。
                    (原因: )
                    结果是这个树大致上是平衡的。因为操作比如插入、删除和查找
                    某个值的最坏情况时间都要求与树的高度成比例，
                    这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，
                    而不同于普通的二叉查找树。

                 定理(先不理解)

                    从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。
                    红黑树的树高(h)不大于两倍的红黑树的黑深度(bd)，即h<=2bd;
                    一棵拥有n个内部结点(不包括叶子结点)的红黑树的树高h<=2log(n+1) .

                    //https://www.cnblogs.com/gofighting/p/5437998.html


                操作




     */


}
